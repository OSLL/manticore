// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snapshot.proto

#ifndef PROTOBUF_snapshot_2eproto__INCLUDED
#define PROTOBUF_snapshot_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_snapshot_2eproto();
void protobuf_AssignDesc_snapshot_2eproto();
void protobuf_ShutdownFile_snapshot_2eproto();

class Register;
class RegistersSnapshot;

enum Register_Type {
  Register_Type_INTEGER = 0,
  Register_Type_FLOATING_POINT = 1
};
bool Register_Type_IsValid(int value);
const Register_Type Register_Type_Type_MIN = Register_Type_INTEGER;
const Register_Type Register_Type_Type_MAX = Register_Type_FLOATING_POINT;
const int Register_Type_Type_ARRAYSIZE = Register_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Register_Type_descriptor();
inline const ::std::string& Register_Type_Name(Register_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Register_Type_descriptor(), value);
}
inline bool Register_Type_Parse(
    const ::std::string& name, Register_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Register_Type>(
    Register_Type_descriptor(), name, value);
}
enum Register_Capacity {
  Register_Capacity_BIT8 = 8,
  Register_Capacity_BIT16 = 16,
  Register_Capacity_BIT32 = 32,
  Register_Capacity_BIT64 = 64,
  Register_Capacity_BIT128 = 128
};
bool Register_Capacity_IsValid(int value);
const Register_Capacity Register_Capacity_Capacity_MIN = Register_Capacity_BIT8;
const Register_Capacity Register_Capacity_Capacity_MAX = Register_Capacity_BIT128;
const int Register_Capacity_Capacity_ARRAYSIZE = Register_Capacity_Capacity_MAX + 1;

const ::google::protobuf::EnumDescriptor* Register_Capacity_descriptor();
inline const ::std::string& Register_Capacity_Name(Register_Capacity value) {
  return ::google::protobuf::internal::NameOfEnum(
    Register_Capacity_descriptor(), value);
}
inline bool Register_Capacity_Parse(
    const ::std::string& name, Register_Capacity* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Register_Capacity>(
    Register_Capacity_descriptor(), name, value);
}
// ===================================================================

class Register : public ::google::protobuf::Message {
 public:
  Register();
  virtual ~Register();
  
  Register(const Register& from);
  
  inline Register& operator=(const Register& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Register& default_instance();
  
  void Swap(Register* other);
  
  // implements Message ----------------------------------------------
  
  Register* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Register& from);
  void MergeFrom(const Register& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Register_Type Type;
  static const Type INTEGER = Register_Type_INTEGER;
  static const Type FLOATING_POINT = Register_Type_FLOATING_POINT;
  static inline bool Type_IsValid(int value) {
    return Register_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Register_Type_Type_MIN;
  static const Type Type_MAX =
    Register_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Register_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Register_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Register_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Register_Type_Parse(name, value);
  }
  
  typedef Register_Capacity Capacity;
  static const Capacity BIT8 = Register_Capacity_BIT8;
  static const Capacity BIT16 = Register_Capacity_BIT16;
  static const Capacity BIT32 = Register_Capacity_BIT32;
  static const Capacity BIT64 = Register_Capacity_BIT64;
  static const Capacity BIT128 = Register_Capacity_BIT128;
  static inline bool Capacity_IsValid(int value) {
    return Register_Capacity_IsValid(value);
  }
  static const Capacity Capacity_MIN =
    Register_Capacity_Capacity_MIN;
  static const Capacity Capacity_MAX =
    Register_Capacity_Capacity_MAX;
  static const int Capacity_ARRAYSIZE =
    Register_Capacity_Capacity_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Capacity_descriptor() {
    return Register_Capacity_descriptor();
  }
  static inline const ::std::string& Capacity_Name(Capacity value) {
    return Register_Capacity_Name(value);
  }
  static inline bool Capacity_Parse(const ::std::string& name,
      Capacity* value) {
    return Register_Capacity_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required .protobuf.Register.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::protobuf::Register_Type type() const;
  inline void set_type(::protobuf::Register_Type value);
  
  // required .protobuf.Register.Capacity capacity = 3;
  inline bool has_capacity() const;
  inline void clear_capacity();
  static const int kCapacityFieldNumber = 3;
  inline ::protobuf::Register_Capacity capacity() const;
  inline void set_capacity(::protobuf::Register_Capacity value);
  
  // required bytes value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:protobuf.Register)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_capacity();
  inline void clear_has_capacity();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  int type_;
  int capacity_;
  ::std::string* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_snapshot_2eproto();
  friend void protobuf_AssignDesc_snapshot_2eproto();
  friend void protobuf_ShutdownFile_snapshot_2eproto();
  
  void InitAsDefaultInstance();
  static Register* default_instance_;
};
// -------------------------------------------------------------------

class RegistersSnapshot : public ::google::protobuf::Message {
 public:
  RegistersSnapshot();
  virtual ~RegistersSnapshot();
  
  RegistersSnapshot(const RegistersSnapshot& from);
  
  inline RegistersSnapshot& operator=(const RegistersSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegistersSnapshot& default_instance();
  
  void Swap(RegistersSnapshot* other);
  
  // implements Message ----------------------------------------------
  
  RegistersSnapshot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegistersSnapshot& from);
  void MergeFrom(const RegistersSnapshot& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.Register register = 1;
  inline int register__size() const;
  inline void clear_register_();
  static const int kRegisterFieldNumber = 1;
  inline const ::protobuf::Register& register_(int index) const;
  inline ::protobuf::Register* mutable_register_(int index);
  inline ::protobuf::Register* add_register_();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::Register >&
      register_() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::Register >*
      mutable_register_();
  
  // @@protoc_insertion_point(class_scope:protobuf.RegistersSnapshot)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::Register > register__;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_snapshot_2eproto();
  friend void protobuf_AssignDesc_snapshot_2eproto();
  friend void protobuf_ShutdownFile_snapshot_2eproto();
  
  void InitAsDefaultInstance();
  static RegistersSnapshot* default_instance_;
};
// ===================================================================


// ===================================================================

// Register

// required string name = 1;
inline bool Register::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Register::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Register::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Register::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Register::name() const {
  return *name_;
}
inline void Register::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Register::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Register::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Register::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Register::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .protobuf.Register.Type type = 2;
inline bool Register::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Register::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Register::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Register::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::protobuf::Register_Type Register::type() const {
  return static_cast< ::protobuf::Register_Type >(type_);
}
inline void Register::set_type(::protobuf::Register_Type value) {
  GOOGLE_DCHECK(::protobuf::Register_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .protobuf.Register.Capacity capacity = 3;
inline bool Register::has_capacity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Register::set_has_capacity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Register::clear_has_capacity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Register::clear_capacity() {
  capacity_ = 8;
  clear_has_capacity();
}
inline ::protobuf::Register_Capacity Register::capacity() const {
  return static_cast< ::protobuf::Register_Capacity >(capacity_);
}
inline void Register::set_capacity(::protobuf::Register_Capacity value) {
  GOOGLE_DCHECK(::protobuf::Register_Capacity_IsValid(value));
  set_has_capacity();
  capacity_ = value;
}

// required bytes value = 4;
inline bool Register::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Register::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Register::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Register::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Register::value() const {
  return *value_;
}
inline void Register::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Register::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Register::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Register::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* Register::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RegistersSnapshot

// repeated .protobuf.Register register = 1;
inline int RegistersSnapshot::register__size() const {
  return register__.size();
}
inline void RegistersSnapshot::clear_register_() {
  register__.Clear();
}
inline const ::protobuf::Register& RegistersSnapshot::register_(int index) const {
  return register__.Get(index);
}
inline ::protobuf::Register* RegistersSnapshot::mutable_register_(int index) {
  return register__.Mutable(index);
}
inline ::protobuf::Register* RegistersSnapshot::add_register_() {
  return register__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::Register >&
RegistersSnapshot::register_() const {
  return register__;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::Register >*
RegistersSnapshot::mutable_register_() {
  return &register__;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::Register_Type>() {
  return ::protobuf::Register_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::Register_Capacity>() {
  return ::protobuf::Register_Capacity_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_snapshot_2eproto__INCLUDED
